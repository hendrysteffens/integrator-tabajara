package com.senior.hcm.integration.workflows.historicalemployeebankaccount;

import com.google.common.collect.ImmutableList;
import com.senior.hcm.api.contract.businessmodule.BusinessModuleDTO;
import com.senior.hcm.integration.CollectionName;
import com.senior.hcm.integration.DatabaseMappingId;
import com.senior.hcm.integration.DatabaseMappingWrapper;
import com.senior.hcm.integration.MetaMigrationCacheRepository;
import com.senior.hcm.integration.Payload;
import com.senior.hcm.integration.SyncCacheRepository;
import com.senior.hcm.integration.SystemPropertiesWrapper;
import com.senior.hcm.integration.annotations.IntegrationWorkflow;
import com.senior.hcm.integration.common.ServiceNameConstant;
import com.senior.hcm.integration.connectors.rest.G5DatabaseWrapper;
import com.senior.hcm.integration.workflows.WorkflowInformation;
import com.senior.hcm.integration.workflows.sync.BaseSyncWorkflow;
import org.apache.commons.lang3.StringUtils;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import static com.senior.hcm.integration.CollectionName.{{#CollectionName}};
import static com.senior.hcm.integration.utils.G5FieldNames.*;

{{#imports}}

@IntegrationWorkflow(modules = {BusinessModuleDTO.{{#DIGITE_OS_MODULOS}}}, //
        name = "{{#EntityTrace}}",
        description = "{{#TranslatedEntityName}}", //
        g5TableNames = "{{#TableG5}}",
        defaultEnabled = true,
        g7TableName = "{{#EntityUnderline}}",
        collection = {{#CollectionName}})
public class {{#EntityCamelCase}}Workflow extends BaseSyncWorkflow<{{#EntityCamelCase}}Dto> {

    private final DatabaseMappingWrapper mapping;
    private static {{#EntityCamelCase}}Workflow instance;

    public static {{#EntityCamelCase}}Workflow getInstance() {
        if (instance == null) {
            instance = new {{#EntityCamelCase}}Workflow();
        }
        return instance;
    }

    public {{#EntityCamelCase}}Workflow() {
        this(SystemPropertiesWrapper.getInstance(),
                MetaMigrationCacheRepository.getInstance(),
                WorkflowInformation.getInstance(),
                SyncCacheRepository.getInstance(),
                G5DatabaseWrapper.getInstance(),
                DatabaseMappingWrapper.getInstance(),
                ModuleUtilsWrapper.getInstance());
    }

    @Override
    public String getServiceName() {
        return ServiceNameConstant.{{#ServiceName}};
    }

    public {{#EntityCamelCase}}Workflow(SystemPropertiesWrapper systemProperties,
                                         MetaMigrationCacheRepository metaMigrationCacheRepository,
                                         WorkflowInformation workflowInformation,
                                         SyncCacheRepository syncCacheRepository,
                                         G5DatabaseWrapper g5DatabaseWrapper,
                                         DatabaseMappingWrapper databaseMapping,
                                         ModuleUtilsWrapper moduleUtils) {
        super(systemProperties, metaMigrationCacheRepository, workflowInformation, syncCacheRepository,
                g5DatabaseWrapper, databaseMapping, moduleUtils);
        this.mapping = databaseMapping;
    }

    @Override
    public Optional<{{#EntityCamelCase}}Dto> build(Payload payload) {
        return Optional.of({{#EntityCamelCase}}Dto.builder()
                    {{#BodyBuild}}
                    .build());
    }

    @Override
    public Object[] getPrimaryKey(Payload payload) {
        return createPrimaryKey({{#BodyGetPrimaryKey}});
    }

    @Override
    public List<String> monitoredFields() {
        return ImmutableList.of({{#BodyMonitoredFields}});
    }


}
